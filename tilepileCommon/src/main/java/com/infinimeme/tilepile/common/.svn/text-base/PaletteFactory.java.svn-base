package com.infinimeme.tilepile.common;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.awt.image.IndexColorModel;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;

/**
 * DOCUMENT ME!
 *
 * @author Greg Barton The contents of this file are released under the GPL.  Copyright
 *         2004-2010 Greg Barton
 **/
public class PaletteFactory {

    //~ Static fields/initializers *****************************************************************

    /** DOCUMENT ME! */
    public static final String BACKUP_EXTENSION = ".tpp";

    //~ Methods ************************************************************************************

    /**
     * DOCUMENT ME!
     *
     * @param paletteName DOCUMENT ME!
     *
     * @return DOCUMENT ME!
     **/
    public static final Palette make(String paletteName) {

        return new Palette(paletteName);
    }

    /**
     * DOCUMENT ME!
     *
     * @param paletteName DOCUMENT ME!
     * @param numColors DOCUMENT ME!
     *
     * @return DOCUMENT ME!
     *
     * @throws IllegalStateException DOCUMENT ME!
     **/
    public static final Palette make(String paletteName, int numColors) {

        List<Palette.PaletteColor> colors = new LinkedList<Palette.PaletteColor>();

        colors.add(
            new Palette.PaletteColor(
                0,
                "000_Color", 
                new Color((float)1.0, (float)1.0, (float)1.0)
            )
        );

        float inverseRoot = (float)(1.0 / Math.pow(numColors, 1 / 3.0));

        float red = 0.0f;
        float green = 0.0f;
        float blue = 0.0f;

        NumberFormat numberFormat = NumberFormat.getIntegerInstance();
        numberFormat.setMinimumIntegerDigits(3);

        for(int i = 1; i < numColors; i++) {

            colors.add(
                new Palette.PaletteColor(
                    i,
                    numberFormat.format(i) + "_Color", 
                    new Color(red, green, blue)
                )
            );

            red += inverseRoot;

            if(red >= 1.0) {
                red -= 1.0;
                green += inverseRoot;
            }

            if(green >= 1.0) {
                green -= 1.0;
                blue += inverseRoot;
            }

            if(blue >= 1.0) {
                throw new IllegalStateException("OVERFLOW!");
            }
        }

        return new Palette(paletteName, colors);
    }

    /**
     * Make a palette from an existing index color image
     *
     * @param paletteName Name of the new palette
     * @param image Index color image
     *
     * @return New palette
     *
     * @throws TilepileException If the input image does not have an index color model
     **/
    public static final Palette make(String paletteName, BufferedImage image) throws TilepileException {

        IndexColorModel imageCM = null;
        
        try {
        	imageCM = (IndexColorModel)image.getColorModel();
        } catch(ClassCastException cce) {
        	throw new TilepileException("Input image does not have index color model!", cce);
        }
        
        int[] imageColors = new int[imageCM.getMapSize()];
        imageCM.getRGBs(imageColors);
        
        int numColors = imageColors.length;
        
        //search color map backwards until we get a non-black color
        for(int i = imageColors.length; i > 0 && imageColors[i - 1] == 0xff000000; i--) {
            numColors = i;
        }

        List<Palette.PaletteColor> colors = new LinkedList<Palette.PaletteColor>();

        NumberFormat numberFormat = NumberFormat.getIntegerInstance();
        numberFormat.setMinimumIntegerDigits(3);

        for(int i = 0; i < numColors; i++) {
            colors.add(
                new Palette.PaletteColor(
                    i,
                    numberFormat.format(i) + "_Color", 
                    new Color(imageColors[i])
                )
            );
        }

        return new Palette(paletteName, colors);
    }

    /**
     * Create a palette from a tilepile palette backup file (tpp)
     *
     * @param paletteFile Name of a tilepile palette backup file (tpp)
     *
     * @return Produced Palette object
     *
     * @throws IOException DOCUMENT ME!
     **/
    public static final Palette make(File paletteFile)
                              throws IOException {

        BufferedReader br = new BufferedReader(new FileReader(paletteFile));

        String name = br.readLine();
        /*int numColors = */Integer.parseInt(br.readLine());
        
        List<Palette.PaletteColor> colors = new LinkedList<Palette.PaletteColor>();

        int index = 0;
        String line = null;

        while(((line = br.readLine()) != null) && !"".equals(line)) {

            String[] data = line.split("\t");
            
            Color color = new Color(Integer.parseInt(data[0]), Integer.parseInt(data[1]),
                                      Integer.parseInt(data[2]));
            
            Palette.PaletteColor pc = 
                new Palette.PaletteColor(
                    index,
                    data[3], 
                    color
                );
            
            colors.add(pc);
            
            //TODO: handle non constructor data
            
            if(data.length > 4) {
                
                pc.setIndex(Integer.parseInt(data[4]));
                pc.setInStock(new Boolean(data[5]).booleanValue()); 
                pc.setSubstitution(Integer.parseInt(data[6]));
                pc.setKilosInDesign(Double.parseDouble(data[7]));
                pc.setKilosInStock(Double.parseDouble(data[8]));
                pc.setKilosOnOrder(Double.parseDouble(data[9]));
                
            }
            
            index++;
        }

        br.close();

        return new Palette(name, colors);
    }

    /**
     * DOCUMENT ME!
     *
     * @param paletteName DOCUMENT ME!
     * @param paletteFile DOCUMENT ME!
     *
     * @return DOCUMENT ME!
     *
     * @throws IOException DOCUMENT ME!
     **/
    public static final Palette make(String paletteName, File paletteFile)
                              throws IOException {

        BufferedReader br = new BufferedReader(new FileReader(paletteFile));
        List<Palette.PaletteColor> colors = new LinkedList<Palette.PaletteColor>();

        int index = 0;
        String line = null;

        while(((line = br.readLine()) != null) && !"".equals(line)) {

            String[] fields = line.split(" +", 6);

            colors.add(
                new Palette.PaletteColor(
                    index,
                    fields[5].replaceFirst("1STATE_", ""), 
                    new Color(
                        Integer.parseInt(fields[1]), 
                        Integer.parseInt(fields[2]),
                        Integer.parseInt(fields[3])
                    )
                )
            );
            
            index++;
        }

        return new Palette(paletteName, colors);
    }

    /**
     * DOCUMENT ME!
     *
     * @param palette DOCUMENT ME!
     *
     * @throws IOException DOCUMENT ME!
     * @throws TilepileException DOCUMENT ME!
     **/
    public static final void save(Palette palette)
                           throws IOException, 
                                  TilepileException {

        BufferedWriter bw = new BufferedWriter(new FileWriter(new File(palette.getName() +
                                                                       BACKUP_EXTENSION)));

        bw.write(palette.getName());
        bw.newLine();

        Collection<Palette.PaletteColor> colors = palette.getColors().values();

        bw.write(Integer.toString(colors.size()));
        bw.newLine();

        for(Palette.PaletteColor pc : colors) {
            
            bw.write(Integer.toString(pc.getColor().getRed()));
            bw.write("\t");
            bw.write(Integer.toString(pc.getColor().getGreen()));
            bw.write("\t");
            bw.write(Integer.toString(pc.getColor().getBlue()));
            bw.write("\t");
            String rgb = Integer.toHexString(pc.getColor().getRGB());
            bw.write(rgb.substring(2, rgb.length()));
            bw.write("\t");
            bw.write(pc.getName());
            bw.write("\t");
            bw.write(Integer.toString(pc.getIndex()));
            bw.write("\t");
            bw.write(Boolean.toString(pc.isInStock()));
            bw.write("\t");
            bw.write(Integer.toString(pc.getSubstitution()));
            bw.write("\t");
            bw.write(Double.toString(pc.getKilosInDesign()));
            bw.write("\t");
            bw.write(Double.toString(pc.getKilosInStock()));
            bw.write("\t");
            bw.write(Double.toString(pc.getKilosOnOrder()));
            bw.newLine();
        }

        bw.flush();
        bw.close();
    }
}
