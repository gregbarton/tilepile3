package com.infinimeme.tilepile.admin;

import java.awt.Color;
import java.awt.GridLayout;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.rmi.RemoteException;
import java.text.ParseException;
import java.util.Map;
import java.util.prefs.Preferences;

import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JColorChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import javax.swing.text.MaskFormatter;

import com.infinimeme.tilepile.common.Palette;
import com.infinimeme.tilepile.common.TilepileUtils;
import com.infinimeme.tilepile.common.Palette.PaletteColor;
import com.infinimeme.tilepile.data.DataManagerRemote;

/**
 * DOCUMENT ME!
 * 
 * @author Greg Barton The contents of this file are released under the GPL.
 *         Copyright 2004-2010 Greg Barton
 */
public class PaletteEditor extends JInternalFrame {

    // ~ Static fields/initializers
    // *****************************************************************

    private static final long serialVersionUID = -7603120797171562179L;

    /** DOCUMENT ME! */
    private static Preferences PACKAGE_PREFS = Preferences.userNodeForPackage(PaletteEditor.class);

    // ~ Instance fields
    // ****************************************************************************

    /** DOCUMENT ME! */
    private Palette palette = null;

    /** DOCUMENT ME! */
    private boolean dirty = false;

    private DataManagerRemote dataManager = null;

    // ~ Constructors
    // *******************************************************************************

    /**
     * Creates a new PaletteEditor object.
     * 
     * @param palette
     *            DOCUMENT ME!
     */
    public PaletteEditor(Palette palette, DataManagerRemote dataManager) {
        this.palette = palette;
        setDataManager(dataManager);

        createMenus();
        setup(palette);

        setTitle("Editing palette " + palette.getName());

        addInternalFrameListener(new InternalFrameAdapter() {
            public void internalFrameClosed(InternalFrameEvent e) {
                exitNicely();
            }
        });

        Preferences classPrefs = PACKAGE_PREFS.node("PaletteEditor");
        final Preferences prefs = classPrefs.node(palette.getName());

        addComponentListener(new ComponentAdapter() {
            public void componentMoved(ComponentEvent e) {

                Rectangle bounds = getBounds();
                prefs.putInt("X", (int) bounds.getX());
                prefs.putInt("Y", (int) bounds.getY());
            }

            public void componentResized(ComponentEvent e) {

                Rectangle bounds = getBounds();
                prefs.putInt("WIDTH", (int) bounds.getWidth());
                prefs.putInt("HEIGHT", (int) bounds.getHeight());
            }
        });

        int x = prefs.getInt("X", 0);
        int y = prefs.getInt("Y", 0);
        int width = prefs.getInt("WIDTH", 640);
        int height = prefs.getInt("HEIGHT", 480);

        setBounds(x, y, width, height);

        setResizable(true);
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);

        setVisible(true);
    }

    // ~ Methods
    // ************************************************************************************

    /**
     * DOCUMENT ME!
     * 
     * @param dataManager
     *            DOCUMENT ME!
     */
    private void setDataManager(DataManagerRemote dataManager) {
        this.dataManager = dataManager;
    }

    /**
     * DOCUMENT ME!
     * 
     * @return DOCUMENT ME!
     */
    private DataManagerRemote getDataManager() {
        return dataManager;
    }

    /**
     * DOCUMENT ME!
     */
    private void createMenus() {

        JMenuBar menuBar = new JMenuBar();
        setJMenuBar(menuBar);

        JMenu fileMenu = new JMenu("File");
        menuBar.add(fileMenu);

        JMenuItem saveItem = new JMenuItem("Save");

        saveItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {

                if (dirty) {
                    try {
                        getDataManager().setPalette(palette);
                        dirty = false;
                    } catch (RemoteException re) {
                        TilepileUtils.exceptionReport(re);
                    }
                }
            }
        });

        fileMenu.add(saveItem);

        JMenu paletteMenu = new JMenu("Palette");
        menuBar.add(paletteMenu);

        JMenuItem addColorItem = new JMenuItem("Add Color");

        addColorItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                Palette.PaletteColor color = new Palette.PaletteColor(Palette.getMaxIndex(palette), "NEW COLOR", Color.BLACK);
                palette.addColor(color);
                setup(palette);

                validate();
                repaint();
            }
        });

        paletteMenu.add(addColorItem);
    }

    /**
     * DOCUMENT ME!
     */
    private final void exitNicely() {

        if (dirty) {

            int decision = JOptionPane.showConfirmDialog(
                getParent(),
                "Do you want to save changes?",
                "Save",
                JOptionPane.YES_NO_OPTION);

            if (decision == JOptionPane.YES_OPTION) {
                try {
                    getDataManager().setPalette(palette);
                } catch (RemoteException re) {
                    TilepileUtils.exceptionReport(re);
                }
            }
        }
    }

    /**
     * DOCUMENT ME!
     * 
     * @param palette
     *            DOCUMENT ME!
     */
    private void setup(final Palette palette) {

        final Map<Integer, PaletteColor> colors = palette.getColors();

        JPanel buttonPanel = new JPanel();

        buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.X_AXIS));
        
        JPanel indexPanel = new JPanel();
        JPanel namePanel = new JPanel();
        JPanel colorButtonPanel = new JPanel();
        JPanel colorHexPanel = new JPanel();
        JPanel inStockPanel = new JPanel();
        JPanel substitutionPanel = new JPanel();
        JPanel kilosInDesignPanel = new JPanel();
        JPanel kilosInStockPanel = new JPanel();
        JPanel kilosOnOrderPanel = new JPanel();
        
        indexPanel.setLayout(new GridLayout(palette.getSize(), 1));
        namePanel.setLayout(new GridLayout(palette.getSize(), 1));
        colorButtonPanel.setLayout(new GridLayout(palette.getSize(), 1));
        colorHexPanel.setLayout(new GridLayout(palette.getSize(), 1));
        inStockPanel.setLayout(new GridLayout(palette.getSize(), 1));
        substitutionPanel.setLayout(new GridLayout(palette.getSize(), 1));
        kilosInDesignPanel.setLayout(new GridLayout(palette.getSize(), 1));
        kilosInStockPanel.setLayout(new GridLayout(palette.getSize(), 1));
        kilosOnOrderPanel.setLayout(new GridLayout(palette.getSize(), 1));
        
        buttonPanel.add(indexPanel);
        buttonPanel.add(namePanel);
        buttonPanel.add(colorButtonPanel);
        buttonPanel.add(colorHexPanel);
        buttonPanel.add(inStockPanel);
        buttonPanel.add(substitutionPanel);
        //buttonPanel.add(kilosInDesignPanel);
        //buttonPanel.add(kilosInStockPanel);
        //buttonPanel.add(kilosOnOrderPanel);
        
        JFormattedTextField.AbstractFormatter hexFormat = null;

        try {
            hexFormat = new MaskFormatter("HHHHHH");
        } catch (ParseException pe) {
            TilepileUtils.exceptionReport(pe);
        }

        for (final Palette.PaletteColor pc : colors.values()) {
            
            final int index = pc.getIndex();

            final Color color = pc.getColor();
            final String name = pc.getName();

            indexPanel.add(new JLabel(Integer.toString(index)));
            
            final JTextField nameText = new JTextField(name);
            final JButton colorButton = new JButton("Color: " + name);

            String hex = Integer.toHexString(color.getRGB()).substring(2);

            final JFormattedTextField hexText = new JFormattedTextField(hexFormat);

            hexText.setText(hex);

            nameText.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {

                    String newName = nameText.getText();

                    if (newName != null && newName.length() > 0 && !newName.equals(name)) {
                        dirty = true;
                        pc.setName(newName);
                        colorButton.setText("Color: " + newName);
                    }
                }
            });

            nameText.addFocusListener(new FocusListener() {

				public void focusGained(FocusEvent e) {
				}

				public void focusLost(FocusEvent e) {

                    String newName = nameText.getText();

                    if (newName != null && newName.length() > 0 && !newName.equals(name)) {
                        dirty = true;
                        pc.setName(newName);
                        colorButton.setText("Color: " + newName);
                    }
				}
            	
            });
            namePanel.add(nameText);

            colorButton.setBackground(color);

            colorButton.setForeground(TilepileUtils.getContrasting(color));

            colorButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {

                    Color result = JColorChooser.showDialog(getParent(), "Edit color " + index, pc.getColor());

                    if (!((result == null) || pc.getColor().equals(result))) {
                        dirty = true;
                        pc.setColor(result);

                        colorButton.setBackground(result);
                        colorButton.setForeground(TilepileUtils.getContrasting(result));
                        hexText.setText(Integer.toHexString(result.getRGB()).substring(2));
                    }
                }
            });

            colorButtonPanel.add(colorButton);

            hexText.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {

                    Color result = new Color(Integer.parseInt(hexText.getText(), 16));

                    if (!pc.getColor().equals(result)) {
                        dirty = true;
                        pc.setColor(result);

                        colorButton.setBackground(result);
                        colorButton.setForeground(TilepileUtils.getContrasting(result));
                    }
                }
            });

            hexText.addFocusListener(new FocusListener() {

				public void focusGained(FocusEvent e) {
				}

				public void focusLost(FocusEvent e) {

                    Color result = new Color(Integer.parseInt(hexText.getText(), 16));

                    if (!pc.getColor().equals(result)) {
                        dirty = true;
                        pc.setColor(result);

                        colorButton.setBackground(result);
                        colorButton.setForeground(TilepileUtils.getContrasting(result));
                    }
				}
            	
            });
            
            colorHexPanel.add(hexText);
            
            final JCheckBox inStockBox = new JCheckBox("In Stock", pc.isInStock());
            
            inStockBox.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {

                    boolean selected = inStockBox.isSelected();

                    if (pc.isInStock() != selected) {
                        dirty = true;
                        pc.setInStock(selected);
                    }
                }
            });

            inStockPanel.add(inStockBox);
            
        }

        getContentPane().removeAll();

        getContentPane().add(
            new JScrollPane(
                buttonPanel,
                JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
                JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED));

    }
}
